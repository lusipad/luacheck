name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        lua_version: [5.1, 5.2, 5.3, 5.4]
        include:
          - lua_version: luajit
            os: ubuntu-latest
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            lua_version: 5.1
          - os: windows-latest
            lua_version: 5.2
          - os: macos-latest
            lua_version: 5.1

    steps:
    - uses: actions/checkout@v4

    - name: Set up Lua
      uses: leafo/gh-actions-lua@v10
      with:
        luaVersion: ${{ matrix.lua_version }}

    - name: Set up Luarocks
      uses: leafo/gh-actions-luarocks@v4

    - name: Install dependencies
      run: |
        luarocks install luafilesystem
        luarocks install argparse
        if [ "${{ matrix.lua_version }}" != "5.1" ] && [ "${{ matrix.lua_version }}" != "luajit" ]; then
          luarocks install lanes
        fi
      shell: bash

    - name: Build
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          make windows
        else
          make
        fi
      shell: bash

    - name: Run tests
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          make test_windows
        else
          make test
        fi
      shell: bash

    - name: Test ks language support
      if: matrix.lua_version == '5.3'
      run: |
        cd test
        lua test_ks_comprehensive.lua
      shell: bash

    - name: Run luacheck on itself
      run: |
        ./bin/luacheck src/
        ./bin/luacheck spec/
        ./bin/luacheck test/ --ignore 211
      shell: bash

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Lua
      uses: leafo/gh-actions-lua@v10
      with:
        luaVersion: 5.3

    - name: Set up Luarocks
      uses: leafo/gh-actions-luarocks@v4

    - name: Install luacheck
      run: |
        luarocks install luacheck

    - name: Lint source code
      run: |
        luacheck src/ --no-max-line-length
        luacheck spec/ --no-max-line-length
        luacheck test/ --ignore 211 --no-max-line-length

  format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Check code formatting
      run: |
        # Basic whitespace and formatting checks
        echo "Checking for basic formatting issues..."
        echo "Checking for tabs..."
        if find . -name "*.lua" -exec grep -l $'\t' {} \; | grep -q .; then
          echo "❌ Found tabs in Lua files"
          find . -name "*.lua" -exec grep -l $'\t' {} \;
          exit 1
        fi
        echo "✅ No tabs found"
        
        echo "Checking for trailing whitespace..."
        if find . -name "*.lua" -exec grep -l ' $' {} \; | grep -q .; then
          echo "❌ Found trailing whitespace in Lua files"
          find . -name "*.lua" -exec grep -l ' $' {} \;
          exit 1
        fi
        echo "✅ No trailing whitespace found"

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Security audit
      run: |
        echo "Running security checks..."
        
        # Check for potential security issues
        echo "Checking for unsafe functions..."
        if grep -r "loadstring\|dofile\|loadfile" src/ --include="*.lua" | grep -v "vendor"; then
          echo "⚠️  Found potentially unsafe functions"
        else
          echo "✅ No unsafe functions found"
        fi
        
        # Check for hardcoded secrets
        echo "Checking for hardcoded secrets..."
        if grep -r "password\|secret\|key\|token" src/ --include="*.lua" | grep -v "vendor" | grep -i "=[\"'].*[\"']"; then
          echo "⚠️  Found potential hardcoded secrets"
        else
          echo "✅ No hardcoded secrets found"
        fi

  docs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Check documentation
      run: |
        echo "Checking documentation files..."
        
        # Check if README files exist
        if [ -f "README.md" ]; then
          echo "✅ README.md exists"
        else
          echo "❌ README.md missing"
          exit 1
        fi
        
        if [ -f "CHANGELOG.md" ]; then
          echo "✅ CHANGELOG.md exists"
        else
          echo "❌ CHANGELOG.md missing"
          exit 1
        fi
        
        if [ -f "LICENSE" ]; then
          echo "✅ LICENSE exists"
        else
          echo "❌ LICENSE missing"
          exit 1
        fi
        
        # Check if documentation is up to date
        echo "Checking documentation links..."
        if grep -r "http" README.md | grep -q "404"; then
          echo "⚠️  Found potentially broken links"
        else
          echo "✅ No obviously broken links found"
        fi