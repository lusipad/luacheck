name: Dependencies

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  push:
    branches: [ master, main ]
    paths: 
      - '.github/workflows/dependencies.yml'
  workflow_dispatch:

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Lua
      uses: leafo/gh-actions-lua@v10
      with:
        luaVersion: 5.3

    - name: Set up Luarocks
      uses: leafo/gh-actions-luarocks@v4

    - name: Check for outdated dependencies
      run: |
        echo "Checking for outdated LuaRocks dependencies..."
        
        # Check if luacheck rockspec exists
        if ls *.rockspec 1> /dev/null 2>&1; then
          echo "Found rockspec files:"
          ls *.rockspec
          
          # Check each rockspec
          for rockspec in *.rockspec; do
            echo "Checking $rockspec..."
            echo "Dependencies in $rockspec:"
            grep "dependencies" "$rockspec" -A 10 || echo "No dependencies found"
          done
        else
          echo "No rockspec files found"
        fi
        
        echo "Dependency check completed"

    - name: Check for workflow updates
      run: |
        echo "Checking for outdated GitHub Actions..."
        
        # List current actions
        echo "Current GitHub Actions:"
        find .github/workflows -name "*.yml" -exec grep -h "uses:" {} \; | sort | uniq
        
        echo "Workflow check completed"

    - name: Create dependency update PR
      if: false  # Disabled by default, can be enabled when needed
      run: |
        echo "Creating dependency update PR..."
        
        # This would be implemented to automatically update dependencies
        # and create a pull request with the changes
        echo "Dependency update PR creation would happen here"
        
        # Example structure:
        # 1. Update rockspec files with new versions
        # 2. Update GitHub Actions versions
        # 3. Test the changes
        # 4. Create PR with description of changes

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Run security audit
      run: |
        echo "Running security audit..."
        
        # Check for known vulnerabilities in dependencies
        echo "Checking for security issues..."
        
        # Check for unsafe patterns in code
        unsafe_patterns=(
            "loadstring"
            "dofile"
            "loadfile"
            "os.execute"
            "io.popen"
            "package.loadlib"
        )
        
        for pattern in "${unsafe_patterns[@]}"; do
          echo "Checking for $pattern..."
          if grep -r "$pattern" src/ --include="*.lua" | grep -v "vendor" | grep -q .; then
            echo "⚠️  Found $pattern in source code:"
            grep -r "$pattern" src/ --include="*.lua" | grep -v "vendor"
          else
            echo "✅ No $pattern found"
          fi
        done
        
        # Check for potential hardcoded secrets
        echo "Checking for hardcoded secrets..."
        secret_patterns=(
            "password.*="
            "secret.*="
            "api.*key.*="
            "token.*="
        )
        
        for pattern in "${secret_patterns[@]}"; do
          if grep -r -i "$pattern" src/ --include="*.lua" | grep -v "vendor" | grep -q .; then
            echo "⚠️  Found potential secret:"
            grep -r -i "$pattern" src/ --include="*.lua" | grep -v "vendor"
          fi
        done
        
        echo "Security audit completed"

  license-compliance:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Check license compliance
      run: |
        echo "Checking license compliance..."
        
        # Check if LICENSE file exists
        if [ -f "LICENSE" ]; then
          echo "✅ LICENSE file exists"
          
          # Check license type
          if grep -q "MIT" LICENSE; then
            echo "✅ MIT license detected"
          else
            echo "ℹ️  License type: $(head -1 LICENSE)"
          fi
        else
          echo "❌ LICENSE file missing"
          exit 1
        fi
        
        # Check for license headers in source files
        echo "Checking for license headers in source files..."
        lua_files=$(find src/ -name "*.lua" | wc -l)
        files_with_headers=$(find src/ -name "*.lua" -exec grep -l "copyright\|Copyright\|LICENSE" {} \; | wc -l)
        
        echo "Lua files: $lua_files"
        echo "Files with license headers: $files_with_headers"
        
        if [ $files_with_headers -eq 0 ]; then
          echo "ℹ️  No license headers found in source files"
        else
          echo "✅ License headers found in $files_with_headers files"
        fi
        
        echo "License compliance check completed"

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Lua
      uses: leafo/gh-actions-lua@v10
      with:
        luaVersion: 5.3

    - name: Set up Luarocks
      uses: leafo/gh-actions-luarocks@v4

    - name: Install luacheck
      run: |
        luarocks install luacheck

    - name: Run code quality checks
      run: |
        echo "Running code quality checks..."
        
        # Check for code complexity
        echo "Checking code complexity..."
        find src/ -name "*.lua" -exec wc -l {} \; | sort -n | tail -5 | while read lines file; do
          if [ "$lines" -gt 500 ]; then
            echo "⚠️  Large file: $file ($lines lines)"
          fi
        done
        
        # Check for function complexity
        echo "Checking function complexity..."
        find src/ -name "*.lua" -exec grep -n "^function\|local function" {} \; | wc -l | read func_count
        echo "Functions found: $func_count"
        
        # Check for TODO comments
        echo "Checking for TODO comments..."
        todo_count=$(find src/ -name "*.lua" -exec grep -l "TODO\|FIXME\|XXX" {} \; | wc -l)
        echo "Files with TODO comments: $todo_count"
        
        if [ "$todo_count" -gt 0 ]; then
          echo "⚠️  Found TODO/FIXME comments:"
          find src/ -name "*.lua" -exec grep -n "TODO\|FIXME\|XXX" {} \;
        fi
        
        echo "Code quality checks completed"

  backup-checks:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Check for backup files
      run: |
        echo "Checking for backup files..."
        
        # Common backup file patterns
        backup_patterns=(
          "*.bak"
          "*.backup"
          "*.tmp"
          "*.temp"
          "*~"
          "*.swp"
          ".DS_Store"
          "Thumbs.db"
        )
        
        found_backups=false
        for pattern in "${backup_patterns[@]}"; do
          if find . -name "$pattern" | grep -q .; then
            echo "⚠️  Found backup files matching $pattern:"
            find . -name "$pattern"
            found_backups=true
          fi
        done
        
        if [ "$found_backups" = false ]; then
          echo "✅ No backup files found"
        fi
        
        # Check for large files that might be backups
        echo "Checking for potentially large files..."
        find . -type f -size +10M | while read file; do
          echo "⚠️  Large file: $file"
        done
        
        echo "Backup check completed"